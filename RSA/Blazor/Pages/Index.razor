@page "/"
@using System.Numerics

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div>
    <div>
        <div>
            <label>P: @P</label>
            <input type="text" @bind="P"/>
        </div>
        <div>
            <label>Q: @Q</label>
            <input type="text" @bind="Q"/>
        </div>
        <div>
            <button @onclick="VerifyPandQ">Check P and Q</button>
            <label>@check1status</label>
        </div>
        <div>
            <label>N: @N</label>
        </div>
        <div>
            <label>Phi(N): @phiN</label>
        </div>
        <div>
            <label>D: @D</label>
        </div>
    </div>
</div>

@code
{
    private int P;
    private int Q;
    private int N;
    private int phiN;
    private bool check1;
    private string check1status;

    private int E = 3;
    private int D;

    private async void VerifyPandQ()
    {
        if (IsPrime(P) && IsPrime(Q))
        {
            N = P * Q;
            phiN = phi(N);
            D = multiplicativeinversemodulo(E, phiN);
            check1 = true;
            check1status = "P and Q are suitable prime numbers";

        }
        else
        {
            N = 0;
            phiN = 0;
            check1 = false;
            check1status = "Suitable prime numbers have not been chosen for P and Q";
        }
    }
    
    public static bool IsPrime(int number)
    {
        if (number <= 1) return false;
        if (number == 2) return true;
        if (number % 2 == 0) return false;

        var boundary = (int)Math.Floor(Math.Sqrt(number));
          
        for (int i = 3; i <= boundary; i=i+2)
            if (number % i == 0)
                return false;
    
        return true;        
    }
    
    public static int gcd(int a, int b)
    {
        if (a == 0)
            return b;
        return gcd(b % a, a);
    }
    
    public static int phi(int n)
    {
        int result = 1;
        for (int i = 2; i < n; i++)
            if (gcd(i, n) == 1)
                result++;
        return result;
    }

    public static int multiplicativeinversemodulo(int e, int phin)
    {
        int theCalculation =(int) BigInteger.ModPow(e, phi(phin) - 1, phin);
        
        return theCalculation;
    }
    
    int modInverse(int a, int n) 
    {
        int i = n, v = 0, d = 1;
        while (a>0) {
            int t = i/a, x = a;
            a = i % x;
            i = x;
            x = d;
            d = v - t*x;
            v = x;
        }
        v %= n;
        if (v<0) v = (v+n)%n;
        return v;
    }
}
